//
//  {{ module_info.file_name }}
//  {{ module_info.project_name }}
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright Â© {{ year }} {{ developer.company }}. All rights reserved.
//

import UIKit
import Swifty

final class {{ module_info.name }}ViewController: UITableViewController, ListViewType {

    typealias Object = Any
    typealias Cell = UITableViewCell

    var vm: {{ module_info.name }}ViewModel?
    var router: {{ module_info.name }}Router { return self }
 

    lazy var controller: TableController<Object, Cell> = {
        return TableController(tableView: self.tableView) { cell, object in
            print(cell, object)
        }
    }()

    // MARK: - Lifetime
    override func viewDidLoad() {
        super.viewDidLoad()
        vm?.updateState()
    }

    // MARK: - Actions
    override func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        let visible = tableView.visibleCells.count
        let total = tableView.numberOfRows(inSection: indexPath.section) - 1
        let current = indexPath.row

        if total - current <= visible {
            vm?.loadNextPage()
        }
    }
}

// MARK: - Bindings
extension {{ module_info.name }}ViewController {
    func update(state: ListViewState, oldState: ListViewState?) {

    }

    func update(list: [Object], batch: BatchUpdate?) {
        let ds = DataSource(list)
        if let batch = batch {
            controller.update(dataSource: ds, batch: batch)
        } else {
            controller.update(dataSource: ds)
        }
    }
}

// MARK: - Private
private extension {{ module_info.name }}ViewController {
    
}
